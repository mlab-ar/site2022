{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PolygonMaskInstance = void 0;\n\nconst Utils_1 = require(\"./Utils\");\n\nconst Utils_2 = require(\"../../Utils/Utils\");\n\nconst NumberUtils_1 = require(\"../../Utils/NumberUtils\");\n\nconst Constants_1 = require(\"../../Core/Utils/Constants\");\n\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\n\nclass PolygonMaskInstance {\n  constructor(container) {\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask_1.PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n\n  async initAsync(options) {\n    this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n    const polygonMaskOptions = this.options;\n    this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n\n    if (polygonMaskOptions.enable) {\n      await this.initRawData();\n    }\n  }\n\n  resize() {\n    const container = this.container,\n          options = this.options;\n\n    if (!(options.enable && options.type !== \"none\")) {\n      return;\n    }\n\n    if (this.redrawTimeout) {\n      clearTimeout(this.redrawTimeout);\n    }\n\n    this.redrawTimeout = window.setTimeout(async () => {\n      await this.initRawData(true);\n      await container.particles.redraw();\n    }, 250);\n  }\n\n  stop() {\n    delete this.raw;\n    delete this.paths;\n  }\n\n  particlesInitialization() {\n    const options = this.options;\n\n    if (options.enable && options.type === \"inline\" && (options.inline.arrangement === \"one-per-point\" || options.inline.arrangement === \"per-point\")) {\n      this.drawPoints();\n      return true;\n    }\n\n    return false;\n  }\n\n  particlePosition(position) {\n    var _a, _b;\n\n    const options = this.options;\n\n    if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n      return;\n    }\n\n    return (0, Utils_2.deepExtend)({}, position ? position : this.randomPoint());\n  }\n\n  particleBounce(particle, delta, direction) {\n    return this.polygonBounce(particle, delta, direction);\n  }\n\n  clickPositionValid(position) {\n    const options = this.options;\n    return options.enable && options.type !== \"none\" && options.type !== \"inline\" && this.checkInsidePolygon(position);\n  }\n\n  draw(context) {\n    var _a;\n\n    if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n\n    const options = this.options,\n          polygonDraw = options.draw;\n\n    if (!options.enable || !polygonDraw.enable) {\n      return;\n    }\n\n    const rawData = this.raw;\n\n    for (const path of this.paths) {\n      const path2d = path.path2d,\n            path2dSupported = this.path2DSupported;\n\n      if (!context) {\n        continue;\n      }\n\n      if (path2dSupported && path2d && this.offset) {\n        (0, Utils_1.drawPolygonMaskPath)(context, path2d, polygonDraw.stroke, this.offset);\n      } else if (rawData) {\n        (0, Utils_1.drawPolygonMask)(context, rawData, polygonDraw.stroke);\n      }\n    }\n  }\n\n  polygonBounce(particle, _delta, direction) {\n    const options = this.options;\n\n    if (!this.raw || !options.enable || direction !== \"top\") {\n      return false;\n    }\n\n    if (options.type === \"inside\" || options.type === \"outside\") {\n      let closest, dx, dy;\n      const pos = particle.getPosition(),\n            radius = particle.getRadius();\n\n      for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        const pi = this.raw[i],\n              pj = this.raw[j];\n        closest = (0, Utils_1.calcClosestPtOnSegment)(pi, pj, pos);\n        const dist = (0, NumberUtils_1.getDistances)(pos, closest);\n        [dx, dy] = [dist.dx, dist.dy];\n\n        if (dist.distance < radius) {\n          (0, Utils_1.segmentBounce)(pi, pj, particle.velocity);\n          return true;\n        }\n      }\n\n      if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n        const factor = {\n          x: 1,\n          y: 1\n        };\n\n        if (particle.position.x >= closest.x) {\n          factor.x = -1;\n        }\n\n        if (particle.position.y >= closest.y) {\n          factor.y = -1;\n        }\n\n        particle.position.x = closest.x + radius * 2 * factor.x;\n        particle.position.y = closest.y + radius * 2 * factor.y;\n        particle.velocity.mult(-1);\n        return true;\n      }\n    } else if (options.type === \"inline\" && particle.initialPosition) {\n      const dist = (0, NumberUtils_1.getDistance)(particle.initialPosition, particle.getPosition());\n\n      if (dist > this.polygonMaskMoveRadius) {\n        particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  checkInsidePolygon(position) {\n    var _a, _b;\n\n    const container = this.container,\n          options = this.options;\n\n    if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n      return true;\n    }\n\n    if (!this.raw) {\n      throw new Error(Constants_1.Constants.noPolygonFound);\n    }\n\n    const canvasSize = container.canvas.size,\n          x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width,\n          y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n    let inside = false;\n\n    for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n      const pi = this.raw[i],\n            pj = this.raw[j],\n            intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n\n    return options.type === \"inside\" ? inside : options.type === \"outside\" ? !inside : false;\n  }\n\n  parseSvgPath(xml, force) {\n    var _a, _b, _c;\n\n    const forceDownload = force !== null && force !== void 0 ? force : false;\n\n    if (this.paths !== undefined && !forceDownload) {\n      return this.raw;\n    }\n\n    const container = this.container,\n          options = this.options,\n          parser = new DOMParser(),\n          doc = parser.parseFromString(xml, \"image/svg+xml\"),\n          svg = doc.getElementsByTagName(\"svg\")[0];\n    let svgPaths = svg.getElementsByTagName(\"path\");\n\n    if (!svgPaths.length) {\n      svgPaths = doc.getElementsByTagName(\"path\");\n    }\n\n    this.paths = [];\n\n    for (let i = 0; i < svgPaths.length; i++) {\n      const path = svgPaths.item(i);\n\n      if (path) {\n        this.paths.push({\n          element: path,\n          length: path.getTotalLength()\n        });\n      }\n    }\n\n    const pxRatio = container.retina.pixelRatio,\n          scale = options.scale / pxRatio;\n    this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n    this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n    const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n      x: 50,\n      y: 50\n    };\n    this.offset = {\n      x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n      y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n    };\n    return (0, Utils_1.parsePaths)(this.paths, scale, this.offset);\n  }\n\n  async downloadSvgPath(svgUrl, force) {\n    const options = this.options,\n          url = svgUrl || options.url,\n          forceDownload = force !== null && force !== void 0 ? force : false;\n\n    if (!url || this.paths !== undefined && !forceDownload) {\n      return this.raw;\n    }\n\n    const req = await fetch(url);\n\n    if (!req.ok) {\n      throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n    }\n\n    return this.parseSvgPath(await req.text(), force);\n  }\n\n  drawPoints() {\n    if (!this.raw) {\n      return;\n    }\n\n    for (const item of this.raw) {\n      this.container.particles.addParticle({\n        x: item.x,\n        y: item.y\n      });\n    }\n  }\n\n  randomPoint() {\n    const container = this.container,\n          options = this.options;\n    let position;\n\n    if (options.type === \"inline\") {\n      switch (options.inline.arrangement) {\n        case \"random-point\":\n          position = this.getRandomPoint();\n          break;\n\n        case \"random-length\":\n          position = this.getRandomPointByLength();\n          break;\n\n        case \"equidistant\":\n          position = this.getEquidistantPointByIndex(container.particles.count);\n          break;\n\n        case \"one-per-point\":\n        case \"per-point\":\n        default:\n          position = this.getPointByIndex(container.particles.count);\n      }\n    } else {\n      position = {\n        x: Math.random() * container.canvas.size.width,\n        y: Math.random() * container.canvas.size.height\n      };\n    }\n\n    if (this.checkInsidePolygon(position)) {\n      return position;\n    } else {\n      return this.randomPoint();\n    }\n  }\n\n  getRandomPoint() {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n    }\n\n    const coords = (0, Utils_2.itemFromArray)(this.raw);\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n\n  getRandomPointByLength() {\n    var _a, _b, _c;\n\n    const options = this.options;\n\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n    }\n\n    const path = (0, Utils_2.itemFromArray)(this.paths),\n          distance = Math.floor(Math.random() * path.length) + 1,\n          point = path.element.getPointAtLength(distance);\n    return {\n      x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n      y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n    };\n  }\n\n  getEquidistantPointByIndex(index) {\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    const options = this.container.actualOptions,\n          polygonMaskOptions = this.options;\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n    let offset = 0,\n        point;\n    const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0),\n          distance = totalLength / options.particles.number.value;\n\n    for (const path of this.paths) {\n      const pathDistance = distance * index - offset;\n\n      if (pathDistance <= path.length) {\n        point = path.element.getPointAtLength(pathDistance);\n        break;\n      } else {\n        offset += path.length;\n      }\n    }\n\n    return {\n      x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n      y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n    };\n  }\n\n  getPointByIndex(index) {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n    }\n\n    const coords = this.raw[index % this.raw.length];\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n\n  createPath2D() {\n    var _a, _b;\n\n    const options = this.options;\n\n    if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n\n    for (const path of this.paths) {\n      const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n\n      if (pathData) {\n        const path2d = new Path2D(pathData),\n              matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(),\n              finalPath = new Path2D(),\n              transform = matrix.scale(options.scale);\n\n        if (finalPath.addPath) {\n          finalPath.addPath(path2d, transform);\n          path.path2d = finalPath;\n        } else {\n          delete path.path2d;\n        }\n      } else {\n        delete path.path2d;\n      }\n\n      if (path.path2d || !this.raw) {\n        continue;\n      }\n\n      path.path2d = new Path2D();\n      path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n      this.raw.forEach((pos, i) => {\n        var _a;\n\n        if (i > 0) {\n          (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n        }\n      });\n      path.path2d.closePath();\n    }\n  }\n\n  async initRawData(force) {\n    const options = this.options;\n\n    if (options.url) {\n      this.raw = await this.downloadSvgPath(options.url, force);\n    } else if (options.data) {\n      const data = options.data;\n      let svg;\n\n      if (typeof data !== \"string\") {\n        const path = data.path instanceof Array ? data.path.map(t => `<path d=\"${t}\" />`).join(\"\") : `<path d=\"${data.path}\" />`;\n        const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n        svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n      } else {\n        svg = data;\n      }\n\n      this.raw = this.parseSvgPath(svg, force);\n    }\n\n    this.createPath2D();\n  }\n\n}\n\nexports.PolygonMaskInstance = PolygonMaskInstance;","map":{"version":3,"names":["Object","defineProperty","exports","value","PolygonMaskInstance","Utils_1","require","Utils_2","NumberUtils_1","Constants_1","PolygonMask_1","constructor","container","dimension","height","width","path2DSupported","window","Path2D","options","PolygonMask","polygonMaskMoveRadius","move","radius","retina","pixelRatio","initAsync","load","polygon","polygonMaskOptions","enable","initRawData","resize","type","redrawTimeout","clearTimeout","setTimeout","particles","redraw","stop","raw","paths","particlesInitialization","inline","arrangement","drawPoints","particlePosition","position","_a","_b","length","deepExtend","randomPoint","particleBounce","particle","delta","direction","polygonBounce","clickPositionValid","checkInsidePolygon","draw","context","polygonDraw","rawData","path","path2d","path2dSupported","offset","drawPolygonMaskPath","stroke","drawPolygonMask","_delta","closest","dx","dy","pos","getPosition","getRadius","i","j","pi","pj","calcClosestPtOnSegment","dist","getDistances","distance","segmentBounce","velocity","undefined","factor","x","y","mult","initialPosition","getDistance","Error","Constants","noPolygonFound","canvasSize","canvas","size","Math","random","inside","intersect","parseSvgPath","xml","force","_c","forceDownload","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","item","push","element","getTotalLength","pxRatio","scale","parseFloat","getAttribute","parsePaths","downloadSvgPath","svgUrl","url","req","fetch","ok","text","addParticle","getRandomPoint","getRandomPointByLength","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","itemFromArray","floor","point","getPointAtLength","index","_d","_e","_f","_g","actualOptions","totalLength","reduce","tot","number","pathDistance","createPath2D","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","moveTo","forEach","lineTo","closePath","data","Array","map","t","join","namespaces"],"sources":["/media/beni/Work3/git/github/site2022/node_modules/tsparticles/cjs/Plugins/PolygonMask/PolygonMaskInstance.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PolygonMaskInstance = void 0;\nconst Utils_1 = require(\"./Utils\");\nconst Utils_2 = require(\"../../Utils/Utils\");\nconst NumberUtils_1 = require(\"../../Utils/NumberUtils\");\nconst Constants_1 = require(\"../../Core/Utils/Constants\");\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\nclass PolygonMaskInstance {\n    constructor(container) {\n        this.container = container;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask_1.PolygonMask();\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    async initAsync(options) {\n        this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n        const polygonMaskOptions = this.options;\n        this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n        if (polygonMaskOptions.enable) {\n            await this.initRawData();\n        }\n    }\n    resize() {\n        const container = this.container, options = this.options;\n        if (!(options.enable && options.type !== \"none\")) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(async () => {\n            await this.initRawData(true);\n            await container.particles.redraw();\n        }, 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === \"inline\" &&\n            (options.inline.arrangement === \"one-per-point\" ||\n                options.inline.arrangement === \"per-point\")) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return (0, Utils_2.deepExtend)({}, position ? position : this.randomPoint());\n    }\n    particleBounce(particle, delta, direction) {\n        return this.polygonBounce(particle, delta, direction);\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== \"none\" &&\n            options.type !== \"inline\" &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options, polygonDraw = options.draw;\n        if (!options.enable || !polygonDraw.enable) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d, path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                (0, Utils_1.drawPolygonMaskPath)(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                (0, Utils_1.drawPolygonMask)(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    polygonBounce(particle, _delta, direction) {\n        const options = this.options;\n        if (!this.raw || !options.enable || direction !== \"top\") {\n            return false;\n        }\n        if (options.type === \"inside\" || options.type === \"outside\") {\n            let closest, dx, dy;\n            const pos = particle.getPosition(), radius = particle.getRadius();\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i], pj = this.raw[j];\n                closest = (0, Utils_1.calcClosestPtOnSegment)(pi, pj, pos);\n                const dist = (0, NumberUtils_1.getDistances)(pos, closest);\n                [dx, dy] = [dist.dx, dist.dy];\n                if (dist.distance < radius) {\n                    (0, Utils_1.segmentBounce)(pi, pj, particle.velocity);\n                    return true;\n                }\n            }\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n                const factor = { x: 1, y: 1 };\n                if (particle.position.x >= closest.x) {\n                    factor.x = -1;\n                }\n                if (particle.position.y >= closest.y) {\n                    factor.y = -1;\n                }\n                particle.position.x = closest.x + radius * 2 * factor.x;\n                particle.position.y = closest.y + radius * 2 * factor.y;\n                particle.velocity.mult(-1);\n                return true;\n            }\n        }\n        else if (options.type === \"inline\" && particle.initialPosition) {\n            const dist = (0, NumberUtils_1.getDistance)(particle.initialPosition, particle.getPosition());\n            if (dist > this.polygonMaskMoveRadius) {\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n                return true;\n            }\n        }\n        return false;\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this.container, options = this.options;\n        if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(Constants_1.Constants.noPolygonFound);\n        }\n        const canvasSize = container.canvas.size, x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i], pj = this.raw[j], intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === \"inside\"\n            ? inside\n            : options.type === \"outside\"\n                ? !inside\n                : false;\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this.container, options = this.options, parser = new DOMParser(), doc = parser.parseFromString(xml, \"image/svg+xml\"), svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio, scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return (0, Utils_1.parsePaths)(this.paths, scale, this.offset);\n    }\n    async downloadSvgPath(svgUrl, force) {\n        const options = this.options, url = svgUrl || options.url, forceDownload = force !== null && force !== void 0 ? force : false;\n        if (!url || (this.paths !== undefined && !forceDownload)) {\n            return this.raw;\n        }\n        const req = await fetch(url);\n        if (!req.ok) {\n            throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n        }\n        return this.parseSvgPath(await req.text(), force);\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this.container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    randomPoint() {\n        const container = this.container, options = this.options;\n        let position;\n        if (options.type === \"inline\") {\n            switch (options.inline.arrangement) {\n                case \"random-point\":\n                    position = this.getRandomPoint();\n                    break;\n                case \"random-length\":\n                    position = this.getRandomPointByLength();\n                    break;\n                case \"equidistant\":\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case \"one-per-point\":\n                case \"per-point\":\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = (0, Utils_2.itemFromArray)(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        }\n        const path = (0, Utils_2.itemFromArray)(this.paths), distance = Math.floor(Math.random() * path.length) + 1, point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this.container.actualOptions, polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        let offset = 0, point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0), distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData), matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(), finalPath = new Path2D(), transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    async initRawData(force) {\n        const options = this.options;\n        if (options.url) {\n            this.raw = await this.downloadSvgPath(options.url, force);\n        }\n        else if (options.data) {\n            const data = options.data;\n            let svg;\n            if (typeof data !== \"string\") {\n                const path = data.path instanceof Array\n                    ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                    : `<path d=\"${data.path}\" />`;\n                const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n            }\n            else {\n                svg = data;\n            }\n            this.raw = this.parseSvgPath(svg, force);\n        }\n        this.createPath2D();\n    }\n}\nexports.PolygonMaskInstance = PolygonMaskInstance;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}