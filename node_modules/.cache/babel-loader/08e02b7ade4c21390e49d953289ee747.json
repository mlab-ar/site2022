{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bubbler = void 0;\n\nconst NumberUtils_1 = require(\"../../../Utils/NumberUtils\");\n\nconst ColorUtils_1 = require(\"../../../Utils/ColorUtils\");\n\nconst Utils_1 = require(\"../../../Utils/Utils\");\n\nconst Circle_1 = require(\"../../../Core/Utils/Circle\");\n\nconst Constants_1 = require(\"../../../Core/Utils/Constants\");\n\nconst ExternalInteractorBase_1 = require(\"../../../Core/Utils/ExternalInteractorBase\");\n\nconst Rectangle_1 = require(\"../../../Core/Utils/Rectangle\");\n\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n  if (modeValue >= optionsValue) {\n    const value = particleValue + (modeValue - optionsValue) * ratio;\n    return (0, NumberUtils_1.clamp)(value, particleValue, modeValue);\n  } else if (modeValue < optionsValue) {\n    const value = particleValue - (optionsValue - modeValue) * ratio;\n    return (0, NumberUtils_1.clamp)(value, modeValue, particleValue);\n  }\n}\n\nclass Bubbler extends ExternalInteractorBase_1.ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n\n    this.handleClickMode = mode => {\n      if (mode !== \"bubble\") {\n        return;\n      }\n\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n\n      container.bubble.clicking = true;\n    };\n  }\n\n  isEnabled() {\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = options.interactivity.events,\n          divs = events.onDiv,\n          divBubble = (0, Utils_1.isDivModeEnabled)(\"bubble\", divs);\n\n    if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode;\n    const clickMode = events.onClick.mode;\n    return (0, Utils_1.isInArray)(\"bubble\", hoverMode) || (0, Utils_1.isInArray)(\"bubble\", clickMode) || divBubble;\n  }\n\n  reset(particle, force) {\n    if (!(!particle.bubble.inRange || force)) {\n      return;\n    }\n\n    delete particle.bubble.div;\n    delete particle.bubble.opacity;\n    delete particle.bubble.radius;\n    delete particle.bubble.color;\n  }\n\n  async interact() {\n    const options = this.container.actualOptions,\n          events = options.interactivity.events,\n          onHover = events.onHover,\n          onClick = events.onClick,\n          hoverEnabled = onHover.enable,\n          hoverMode = onHover.mode,\n          clickEnabled = onClick.enable,\n          clickMode = onClick.mode,\n          divs = events.onDiv;\n\n    if (hoverEnabled && (0, Utils_1.isInArray)(\"bubble\", hoverMode)) {\n      this.hoverBubble();\n    } else if (clickEnabled && (0, Utils_1.isInArray)(\"bubble\", clickMode)) {\n      this.clickBubble();\n    } else {\n      (0, Utils_1.divModeExecute)(\"bubble\", divs, (selector, div) => this.singleSelectorHover(selector, div));\n    }\n  }\n\n  singleSelectorHover(selector, div) {\n    const container = this.container,\n          selectors = document.querySelectorAll(selector);\n\n    if (!selectors.length) {\n      return;\n    }\n\n    selectors.forEach(item => {\n      const elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n        x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n        y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n      },\n            repulseRadius = elem.offsetWidth / 2 * pxRatio,\n            area = div.type === \"circle\" ? new Circle_1.Circle(pos.x, pos.y, repulseRadius) : new Rectangle_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n            query = container.particles.quadTree.query(area);\n\n      for (const particle of query) {\n        if (!area.contains(particle.getPosition())) {\n          continue;\n        }\n\n        particle.bubble.inRange = true;\n        const divs = container.actualOptions.interactivity.modes.bubble.divs;\n        const divBubble = (0, Utils_1.divMode)(divs, elem);\n\n        if (!particle.bubble.div || particle.bubble.div !== elem) {\n          this.reset(particle, true);\n          particle.bubble.div = elem;\n        }\n\n        this.hoverBubbleSize(particle, 1, divBubble);\n        this.hoverBubbleOpacity(particle, 1, divBubble);\n        this.hoverBubbleColor(particle, 1, divBubble);\n      }\n    });\n  }\n\n  process(particle, distMouse, timeSpent, data) {\n    const container = this.container,\n          bubbleParam = data.bubbleObj.optValue;\n\n    if (bubbleParam === undefined) {\n      return;\n    }\n\n    const options = container.actualOptions,\n          bubbleDuration = options.interactivity.modes.bubble.duration,\n          bubbleDistance = container.retina.bubbleModeDistance,\n          particlesParam = data.particlesObj.optValue,\n          pObjBubble = data.bubbleObj.value,\n          pObj = data.particlesObj.value || 0,\n          type = data.type;\n\n    if (bubbleParam === particlesParam) {\n      return;\n    }\n\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n\n    if (!container.bubble.durationEnd) {\n      if (distMouse <= bubbleDistance) {\n        const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n\n        if (obj !== bubbleParam) {\n          const value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n\n          if (type === \"size\") {\n            particle.bubble.radius = value;\n          }\n\n          if (type === \"opacity\") {\n            particle.bubble.opacity = value;\n          }\n        }\n      } else {\n        if (type === \"size\") {\n          delete particle.bubble.radius;\n        }\n\n        if (type === \"opacity\") {\n          delete particle.bubble.opacity;\n        }\n      }\n    } else if (pObjBubble) {\n      if (type === \"size\") {\n        delete particle.bubble.radius;\n      }\n\n      if (type === \"opacity\") {\n        delete particle.bubble.opacity;\n      }\n    }\n  }\n\n  clickBubble() {\n    var _a, _b;\n\n    const container = this.container,\n          options = container.actualOptions,\n          mouseClickPos = container.interactivity.mouse.clickPosition;\n\n    if (!mouseClickPos) {\n      return;\n    }\n\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n\n    const distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n\n    for (const particle of query) {\n      if (!container.bubble.clicking) {\n        continue;\n      }\n\n      particle.bubble.inRange = !container.bubble.durationEnd;\n      const pos = particle.getPosition(),\n            distMouse = (0, NumberUtils_1.getDistance)(pos, mouseClickPos),\n            timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n\n      if (timeSpent > options.interactivity.modes.bubble.duration) {\n        container.bubble.durationEnd = true;\n      }\n\n      if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n        container.bubble.clicking = false;\n        container.bubble.durationEnd = false;\n      }\n\n      const sizeData = {\n        bubbleObj: {\n          optValue: container.retina.bubbleModeSize,\n          value: particle.bubble.radius\n        },\n        particlesObj: {\n          optValue: (0, NumberUtils_1.getRangeMax)(particle.options.size.value) * container.retina.pixelRatio,\n          value: particle.size.value\n        },\n        type: \"size\"\n      };\n      this.process(particle, distMouse, timeSpent, sizeData);\n      const opacityData = {\n        bubbleObj: {\n          optValue: options.interactivity.modes.bubble.opacity,\n          value: particle.bubble.opacity\n        },\n        particlesObj: {\n          optValue: (0, NumberUtils_1.getRangeMax)(particle.options.opacity.value),\n          value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1\n        },\n        type: \"opacity\"\n      };\n      this.process(particle, distMouse, timeSpent, opacityData);\n\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= container.retina.bubbleModeDistance) {\n          this.hoverBubbleColor(particle, distMouse);\n        } else {\n          delete particle.bubble.color;\n        }\n      } else {\n        delete particle.bubble.color;\n      }\n    }\n  }\n\n  hoverBubble() {\n    const container = this.container,\n          mousePos = container.interactivity.mouse.position;\n\n    if (mousePos === undefined) {\n      return;\n    }\n\n    const distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mousePos, distance);\n\n    for (const particle of query) {\n      particle.bubble.inRange = true;\n      const pos = particle.getPosition(),\n            pointDistance = (0, NumberUtils_1.getDistance)(pos, mousePos),\n            ratio = 1 - pointDistance / distance;\n\n      if (pointDistance <= distance) {\n        if (ratio >= 0 && container.interactivity.status === Constants_1.Constants.mouseMoveEvent) {\n          this.hoverBubbleSize(particle, ratio);\n          this.hoverBubbleOpacity(particle, ratio);\n          this.hoverBubbleColor(particle, ratio);\n        }\n      } else {\n        this.reset(particle);\n      }\n\n      if (container.interactivity.status === Constants_1.Constants.mouseLeaveEvent) {\n        this.reset(particle);\n      }\n    }\n  }\n\n  hoverBubbleSize(particle, ratio, divBubble) {\n    const container = this.container,\n          modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n\n    if (modeSize === undefined) {\n      return;\n    }\n\n    const optSize = (0, NumberUtils_1.getRangeMax)(particle.options.size.value) * container.retina.pixelRatio;\n    const pSize = particle.size.value;\n    const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n\n    if (size !== undefined) {\n      particle.bubble.radius = size;\n    }\n  }\n\n  hoverBubbleOpacity(particle, ratio, divBubble) {\n    var _a, _b, _c;\n\n    const container = this.container,\n          options = container.actualOptions,\n          modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n\n    if (!modeOpacity) {\n      return;\n    }\n\n    const optOpacity = particle.options.opacity.value;\n    const pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n    const opacity = calculateBubbleValue(pOpacity, modeOpacity, (0, NumberUtils_1.getRangeMax)(optOpacity), ratio);\n\n    if (opacity !== undefined) {\n      particle.bubble.opacity = opacity;\n    }\n  }\n\n  hoverBubbleColor(particle, ratio, divBubble) {\n    const options = this.container.actualOptions;\n    const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n\n    if (!particle.bubble.finalColor) {\n      const modeColor = bubbleOptions.color;\n\n      if (!modeColor) {\n        return;\n      }\n\n      const bubbleColor = modeColor instanceof Array ? (0, Utils_1.itemFromArray)(modeColor) : modeColor;\n      particle.bubble.finalColor = (0, ColorUtils_1.colorToHsl)(bubbleColor);\n    }\n\n    if (!particle.bubble.finalColor) {\n      return;\n    }\n\n    if (bubbleOptions.mix) {\n      particle.bubble.color = undefined;\n      const pColor = particle.getFillColor();\n      particle.bubble.color = pColor ? (0, ColorUtils_1.rgbToHsl)((0, ColorUtils_1.colorMix)(pColor, particle.bubble.finalColor, 1 - ratio, ratio)) : particle.bubble.finalColor;\n    } else {\n      particle.bubble.color = particle.bubble.finalColor;\n    }\n  }\n\n}\n\nexports.Bubbler = Bubbler;","map":{"version":3,"names":["Object","defineProperty","exports","value","Bubbler","NumberUtils_1","require","ColorUtils_1","Utils_1","Circle_1","Constants_1","ExternalInteractorBase_1","Rectangle_1","calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","clamp","ExternalInteractorBase","constructor","container","bubble","handleClickMode","mode","clicking","isEnabled","options","actualOptions","mouse","interactivity","events","divs","onDiv","divBubble","isDivModeEnabled","onHover","enable","position","onClick","clickPosition","hoverMode","clickMode","isInArray","reset","particle","force","inRange","div","opacity","radius","color","interact","hoverEnabled","clickEnabled","hoverBubble","clickBubble","divModeExecute","selector","singleSelectorHover","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","retina","pixelRatio","pos","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","type","Circle","Rectangle","query","particles","quadTree","contains","getPosition","modes","divMode","hoverBubbleSize","hoverBubbleOpacity","hoverBubbleColor","process","distMouse","timeSpent","data","bubbleParam","bubbleObj","optValue","undefined","bubbleDuration","duration","bubbleDistance","bubbleModeDistance","particlesParam","particlesObj","pObjBubble","pObj","durationEnd","obj","_a","_b","mouseClickPos","distance","queryCircle","getDistance","Date","getTime","clickTime","sizeData","bubbleModeSize","getRangeMax","size","opacityData","mousePos","pointDistance","status","Constants","mouseMoveEvent","mouseLeaveEvent","modeSize","optSize","pSize","_c","modeOpacity","optOpacity","pOpacity","bubbleOptions","finalColor","modeColor","bubbleColor","Array","itemFromArray","colorToHsl","mix","pColor","getFillColor","rgbToHsl","colorMix"],"sources":["/media/beni/Work3/git/github/site2022/node_modules/tsparticles/cjs/Interactions/External/Bubble/Bubbler.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Bubbler = void 0;\nconst NumberUtils_1 = require(\"../../../Utils/NumberUtils\");\nconst ColorUtils_1 = require(\"../../../Utils/ColorUtils\");\nconst Utils_1 = require(\"../../../Utils/Utils\");\nconst Circle_1 = require(\"../../../Core/Utils/Circle\");\nconst Constants_1 = require(\"../../../Core/Utils/Constants\");\nconst ExternalInteractorBase_1 = require(\"../../../Core/Utils/ExternalInteractorBase\");\nconst Rectangle_1 = require(\"../../../Core/Utils/Rectangle\");\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return (0, NumberUtils_1.clamp)(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return (0, NumberUtils_1.clamp)(value, modeValue, particleValue);\n    }\n}\nclass Bubbler extends ExternalInteractorBase_1.ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== \"bubble\") {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    isEnabled() {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = options.interactivity.events, divs = events.onDiv, divBubble = (0, Utils_1.isDivModeEnabled)(\"bubble\", divs);\n        if (!(divBubble || (events.onHover.enable && mouse.position) || (events.onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        const clickMode = events.onClick.mode;\n        return (0, Utils_1.isInArray)(\"bubble\", hoverMode) || (0, Utils_1.isInArray)(\"bubble\", clickMode) || divBubble;\n    }\n    reset(particle, force) {\n        if (!(!particle.bubble.inRange || force)) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    async interact() {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && (0, Utils_1.isInArray)(\"bubble\", hoverMode)) {\n            this.hoverBubble();\n        }\n        else if (clickEnabled && (0, Utils_1.isInArray)(\"bubble\", clickMode)) {\n            this.clickBubble();\n        }\n        else {\n            (0, Utils_1.divModeExecute)(\"bubble\", divs, (selector, div) => this.singleSelectorHover(selector, div));\n        }\n    }\n    singleSelectorHover(selector, div) {\n        const container = this.container, selectors = document.querySelectorAll(selector);\n        if (!selectors.length) {\n            return;\n        }\n        selectors.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                ? new Circle_1.Circle(pos.x, pos.y, repulseRadius)\n                : new Rectangle_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area);\n            for (const particle of query) {\n                if (!area.contains(particle.getPosition())) {\n                    continue;\n                }\n                particle.bubble.inRange = true;\n                const divs = container.actualOptions.interactivity.modes.bubble.divs;\n                const divBubble = (0, Utils_1.divMode)(divs, elem);\n                if (!particle.bubble.div || particle.bubble.div !== elem) {\n                    this.reset(particle, true);\n                    particle.bubble.div = elem;\n                }\n                this.hoverBubbleSize(particle, 1, divBubble);\n                this.hoverBubbleOpacity(particle, 1, divBubble);\n                this.hoverBubbleColor(particle, 1, divBubble);\n            }\n        });\n    }\n    process(particle, distMouse, timeSpent, data) {\n        const container = this.container, bubbleParam = data.bubbleObj.optValue;\n        if (bubbleParam === undefined) {\n            return;\n        }\n        const options = container.actualOptions, bubbleDuration = options.interactivity.modes.bubble.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\n        if (bubbleParam === particlesParam) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        if (!container.bubble.durationEnd) {\n            if (distMouse <= bubbleDistance) {\n                const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n                if (obj !== bubbleParam) {\n                    const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                    if (type === \"size\") {\n                        particle.bubble.radius = value;\n                    }\n                    if (type === \"opacity\") {\n                        particle.bubble.opacity = value;\n                    }\n                }\n            }\n            else {\n                if (type === \"size\") {\n                    delete particle.bubble.radius;\n                }\n                if (type === \"opacity\") {\n                    delete particle.bubble.opacity;\n                }\n            }\n        }\n        else if (pObjBubble) {\n            if (type === \"size\") {\n                delete particle.bubble.radius;\n            }\n            if (type === \"opacity\") {\n                delete particle.bubble.opacity;\n            }\n        }\n    }\n    clickBubble() {\n        var _a, _b;\n        const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition;\n        if (!mouseClickPos) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n        for (const particle of query) {\n            if (!container.bubble.clicking) {\n                continue;\n            }\n            particle.bubble.inRange = !container.bubble.durationEnd;\n            const pos = particle.getPosition(), distMouse = (0, NumberUtils_1.getDistance)(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n            if (timeSpent > options.interactivity.modes.bubble.duration) {\n                container.bubble.durationEnd = true;\n            }\n            if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n                container.bubble.clicking = false;\n                container.bubble.durationEnd = false;\n            }\n            const sizeData = {\n                bubbleObj: {\n                    optValue: container.retina.bubbleModeSize,\n                    value: particle.bubble.radius,\n                },\n                particlesObj: {\n                    optValue: (0, NumberUtils_1.getRangeMax)(particle.options.size.value) * container.retina.pixelRatio,\n                    value: particle.size.value,\n                },\n                type: \"size\",\n            };\n            this.process(particle, distMouse, timeSpent, sizeData);\n            const opacityData = {\n                bubbleObj: {\n                    optValue: options.interactivity.modes.bubble.opacity,\n                    value: particle.bubble.opacity,\n                },\n                particlesObj: {\n                    optValue: (0, NumberUtils_1.getRangeMax)(particle.options.opacity.value),\n                    value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1,\n                },\n                type: \"opacity\",\n            };\n            this.process(particle, distMouse, timeSpent, opacityData);\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= container.retina.bubbleModeDistance) {\n                    this.hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n            else {\n                delete particle.bubble.color;\n            }\n        }\n    }\n    hoverBubble() {\n        const container = this.container, mousePos = container.interactivity.mouse.position;\n        if (mousePos === undefined) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n        for (const particle of query) {\n            particle.bubble.inRange = true;\n            const pos = particle.getPosition(), pointDistance = (0, NumberUtils_1.getDistance)(pos, mousePos), ratio = 1 - pointDistance / distance;\n            if (pointDistance <= distance) {\n                if (ratio >= 0 && container.interactivity.status === Constants_1.Constants.mouseMoveEvent) {\n                    this.hoverBubbleSize(particle, ratio);\n                    this.hoverBubbleOpacity(particle, ratio);\n                    this.hoverBubbleColor(particle, ratio);\n                }\n            }\n            else {\n                this.reset(particle);\n            }\n            if (container.interactivity.status === Constants_1.Constants.mouseLeaveEvent) {\n                this.reset(particle);\n            }\n        }\n    }\n    hoverBubbleSize(particle, ratio, divBubble) {\n        const container = this.container, modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n        if (modeSize === undefined) {\n            return;\n        }\n        const optSize = (0, NumberUtils_1.getRangeMax)(particle.options.size.value) * container.retina.pixelRatio;\n        const pSize = particle.size.value;\n        const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n        if (size !== undefined) {\n            particle.bubble.radius = size;\n        }\n    }\n    hoverBubbleOpacity(particle, ratio, divBubble) {\n        var _a, _b, _c;\n        const container = this.container, options = container.actualOptions, modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n        if (!modeOpacity) {\n            return;\n        }\n        const optOpacity = particle.options.opacity.value;\n        const pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n        const opacity = calculateBubbleValue(pOpacity, modeOpacity, (0, NumberUtils_1.getRangeMax)(optOpacity), ratio);\n        if (opacity !== undefined) {\n            particle.bubble.opacity = opacity;\n        }\n    }\n    hoverBubbleColor(particle, ratio, divBubble) {\n        const options = this.container.actualOptions;\n        const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n        if (!particle.bubble.finalColor) {\n            const modeColor = bubbleOptions.color;\n            if (!modeColor) {\n                return;\n            }\n            const bubbleColor = modeColor instanceof Array ? (0, Utils_1.itemFromArray)(modeColor) : modeColor;\n            particle.bubble.finalColor = (0, ColorUtils_1.colorToHsl)(bubbleColor);\n        }\n        if (!particle.bubble.finalColor) {\n            return;\n        }\n        if (bubbleOptions.mix) {\n            particle.bubble.color = undefined;\n            const pColor = particle.getFillColor();\n            particle.bubble.color = pColor\n                ? (0, ColorUtils_1.rgbToHsl)((0, ColorUtils_1.colorMix)(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\n                : particle.bubble.finalColor;\n        }\n        else {\n            particle.bubble.color = particle.bubble.finalColor;\n        }\n    }\n}\nexports.Bubbler = Bubbler;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}